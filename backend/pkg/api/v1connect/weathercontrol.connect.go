// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: weathercontrol.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
	api "weathercontrol/pkg/api"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// WeatherControlServiceName is the fully-qualified name of the WeatherControlService service.
	WeatherControlServiceName = "weathercontrol.v1.WeatherControlService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// WeatherControlServiceGetWeatherProcedure is the fully-qualified name of the
	// WeatherControlService's GetWeather RPC.
	WeatherControlServiceGetWeatherProcedure = "/weathercontrol.v1.WeatherControlService/GetWeather"
	// WeatherControlServiceSetWeatherProcedure is the fully-qualified name of the
	// WeatherControlService's SetWeather RPC.
	WeatherControlServiceSetWeatherProcedure = "/weathercontrol.v1.WeatherControlService/SetWeather"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	weatherControlServiceServiceDescriptor          = api.File_weathercontrol_proto.Services().ByName("WeatherControlService")
	weatherControlServiceGetWeatherMethodDescriptor = weatherControlServiceServiceDescriptor.Methods().ByName("GetWeather")
	weatherControlServiceSetWeatherMethodDescriptor = weatherControlServiceServiceDescriptor.Methods().ByName("SetWeather")
)

// WeatherControlServiceClient is a client for the weathercontrol.v1.WeatherControlService service.
type WeatherControlServiceClient interface {
	// Selects the latest weather that has been set, or a default of {"Sunny", 1}
	GetWeather(context.Context, *connect.Request[api.GetWeatherRequest]) (*connect.Response[api.GetWeatherResponse], error)
	// Adds a new weather to the database
	SetWeather(context.Context, *connect.Request[api.SetWeatherRequest]) (*connect.Response[api.SetWeatherResponse], error)
}

// NewWeatherControlServiceClient constructs a client for the
// weathercontrol.v1.WeatherControlService service. By default, it uses the Connect protocol with
// the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To use
// the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewWeatherControlServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) WeatherControlServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &weatherControlServiceClient{
		getWeather: connect.NewClient[api.GetWeatherRequest, api.GetWeatherResponse](
			httpClient,
			baseURL+WeatherControlServiceGetWeatherProcedure,
			connect.WithSchema(weatherControlServiceGetWeatherMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		setWeather: connect.NewClient[api.SetWeatherRequest, api.SetWeatherResponse](
			httpClient,
			baseURL+WeatherControlServiceSetWeatherProcedure,
			connect.WithSchema(weatherControlServiceSetWeatherMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// weatherControlServiceClient implements WeatherControlServiceClient.
type weatherControlServiceClient struct {
	getWeather *connect.Client[api.GetWeatherRequest, api.GetWeatherResponse]
	setWeather *connect.Client[api.SetWeatherRequest, api.SetWeatherResponse]
}

// GetWeather calls weathercontrol.v1.WeatherControlService.GetWeather.
func (c *weatherControlServiceClient) GetWeather(ctx context.Context, req *connect.Request[api.GetWeatherRequest]) (*connect.Response[api.GetWeatherResponse], error) {
	return c.getWeather.CallUnary(ctx, req)
}

// SetWeather calls weathercontrol.v1.WeatherControlService.SetWeather.
func (c *weatherControlServiceClient) SetWeather(ctx context.Context, req *connect.Request[api.SetWeatherRequest]) (*connect.Response[api.SetWeatherResponse], error) {
	return c.setWeather.CallUnary(ctx, req)
}

// WeatherControlServiceHandler is an implementation of the weathercontrol.v1.WeatherControlService
// service.
type WeatherControlServiceHandler interface {
	// Selects the latest weather that has been set, or a default of {"Sunny", 1}
	GetWeather(context.Context, *connect.Request[api.GetWeatherRequest]) (*connect.Response[api.GetWeatherResponse], error)
	// Adds a new weather to the database
	SetWeather(context.Context, *connect.Request[api.SetWeatherRequest]) (*connect.Response[api.SetWeatherResponse], error)
}

// NewWeatherControlServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewWeatherControlServiceHandler(svc WeatherControlServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	weatherControlServiceGetWeatherHandler := connect.NewUnaryHandler(
		WeatherControlServiceGetWeatherProcedure,
		svc.GetWeather,
		connect.WithSchema(weatherControlServiceGetWeatherMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	weatherControlServiceSetWeatherHandler := connect.NewUnaryHandler(
		WeatherControlServiceSetWeatherProcedure,
		svc.SetWeather,
		connect.WithSchema(weatherControlServiceSetWeatherMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/weathercontrol.v1.WeatherControlService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case WeatherControlServiceGetWeatherProcedure:
			weatherControlServiceGetWeatherHandler.ServeHTTP(w, r)
		case WeatherControlServiceSetWeatherProcedure:
			weatherControlServiceSetWeatherHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedWeatherControlServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedWeatherControlServiceHandler struct{}

func (UnimplementedWeatherControlServiceHandler) GetWeather(context.Context, *connect.Request[api.GetWeatherRequest]) (*connect.Response[api.GetWeatherResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("weathercontrol.v1.WeatherControlService.GetWeather is not implemented"))
}

func (UnimplementedWeatherControlServiceHandler) SetWeather(context.Context, *connect.Request[api.SetWeatherRequest]) (*connect.Response[api.SetWeatherResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("weathercontrol.v1.WeatherControlService.SetWeather is not implemented"))
}
